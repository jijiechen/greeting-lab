apiVersion: v1
kind: Template
metadata:
  name: csgit-apps-deploy-template
  annotations:
    description: CSG IT basic deploy config template on Openshift
    tags: csgit
labels:
  template: csgit-apps-deploy-template
objects:
  - apiVersion: v1
    kind: Service
    metadata:
      name: '${APP_NAME}-v${APP_MAJOR_VERSION}'
      annotations:
        prometheus.io/path: /actuator/prometheus
        prometheus.io/port: '9090'
        prometheus.io/scrape: 'true'
      labels:
        provider: s2i
        appname: '${APP_NAME}'
        appversion: '${APP_FULL_VERSION}'
        majorversion: '${APP_MAJOR_VERSION}'
        buildnumber: ${JENKINS_BUILD_NUMBER}
        gitcommitid: ${GIT_COMMIT_ID}
    spec:
      type: ClusterIP
      ports:
        - name: '${APP_NAME}-v${APP_MAJOR_VERSION}-http'
          # TODO: let's discuss about if we can have the same port.
          port: 80
          targetPort: 8080
      selector:
        provider: s2i
        appname: '${APP_NAME}'
        majorversion: '${APP_MAJOR_VERSION}'
        deploymentconfig: '${APP_NAME}-v${APP_MAJOR_VERSION}'

  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      labels:
        provider: s2i
        appname: '${APP_NAME}'
        appversion: '${APP_FULL_VERSION}'
        majorversion: '${APP_MAJOR_VERSION}'
        buildnumber: ${JENKINS_BUILD_NUMBER}
        gitcommitid: ${GIT_COMMIT_ID}
      name: '${APP_NAME}-v${APP_MAJOR_VERSION}'
    spec:
      replicas: 1
      selector:
        provider: s2i
        appname: '${APP_NAME}'
        majorversion: '${APP_MAJOR_VERSION}'
        deploymentconfig: '${APP_NAME}-v${APP_MAJOR_VERSION}'
      strategy:
        type: Rolling
        rollingParams:
          updatePeriodSeconds: 1
          intervalSeconds: 1
          timeoutSeconds: 600
          maxUnavailable: 25%
          maxSurge: 25%
        resources: {}
      template:
        metadata:
          labels:
            provider: s2i
            appname: '${APP_NAME}'
            majorversion: '${APP_MAJOR_VERSION}'
            deploymentconfig: '${APP_NAME}-v${APP_MAJOR_VERSION}'
        spec:
          volumes:
            - name: config
              configMap:
                name: '${APP_NAME}-v${APP_MAJOR_VERSION}'
          containers:
            - name: '${APP_NAME}-v${APP_MAJOR_VERSION}'
              image: '${APP_NAME}-v${APP_MAJOR_VERSION}:${APP_FULL_VERSION}'
              ports:
                - containerPort: 8080
                  name: http
                  protocol: TCP
              env:
                - name: KUBERNETES_NAMESPACE
                  valueFrom: {fieldRef: {fieldPath: metadata.namespace}}
                - name: POD_IP
                  valueFrom:
                    fieldRef:
                      fieldPath: status.podIP
                - name: SPRING_CONFIG_LOCATION
                  value: '/etc/config/'
                - name: AB_JOLOKIA_OFF
                  value: 'true'
                - name: 'TZ'
                  value: "Asia/Jakarta"
                - name: jasypt.encryptor.password
                  valueForm:
                    secretKeyRef:
                    key: secretkey
                    name: password                  
              volumeMounts:
                - name: config
                  readOnly: true
                  mountPath: /etc/config
              resources:
                requests:
                  cpu: '0.5'
                  memory: '256Mi' 
                limits:
                  cpu: '${CPU_LIMITATION}'
                  memory: '${MEM_LIMITATION}' 
              livenessProbe:
                httpGet:
                  path: ${HEALTH_PROBE_PATH}
                  port: ${{HEALTH_PROBE_PORT}}
                  scheme: HTTP
                initialDelaySeconds: 100
                timeoutSeconds: 1
                periodSeconds: 10
                successThreshold: 1
                failureThreshold: 15
              readinessProbe:
                httpGet:
                  path: ${HEALTH_PROBE_PATH}
                  port: ${{HEALTH_PROBE_PORT}}
                  scheme: HTTP
                initialDelaySeconds: 100
                timeoutSeconds: 1
                periodSeconds: 10
                successThreshold: 1
                failureThreshold: 15
      # TODO: consider to avoid trigger  - more discussion - because we wanna control deployments from Jenkins and not OCP        
      triggers:
        - type: "ImageChange" 
          imageChangeParams:
            automatic: true
            containerNames:
              - '${APP_NAME}-v${APP_MAJOR_VERSION}'
            from:
              kind: "ImageStreamTag"
              name: '${APP_NAME}-v${APP_MAJOR_VERSION}:${APP_FULL_VERSION}'
parameters:
  - name: APP_NAME
    displayName: Application Name
    description: The name assigned to the application.
    required: true
  - name: APP_MAJOR_VERSION
    displayName: Application Major Version
    description: The application major version from the pom version tag e.g. 1 for 1.0.0-SNAPSHOT.
  - name: APP_FULL_VERSION
    displayName: RAW app version
    description: RAW app version e.g. 1.0
    required: true
  - name: GIT_COMMIT_ID
    displayName: GIT Commit ID
    description: GIT Commit ID from Jenkins
    required: true
  - name: JENKINS_BUILD_NUMBER
    displayName: Jenkins Build Number
    description: Jenkins Build Number
    required: true
  - name: HEALTH_PROBE_PORT
    displayName: Health Probe Endpoint Port
    description: Port of the health probe endpoint
    required: true
  - name: HEALTH_PROBE_PATH
    displayName: Health Probe Endpoint Path
    description: Url Path of the health probe endpoint
    required: true
  - name: CPU_LIMITATION
    displayName: LIMIT CPU
    description: LIMIT CPU
    required: true
  - name: MEM_LIMITATION
    displayName: LIMIT MEMORY
    description: LIMIT MEMORY
    required: true